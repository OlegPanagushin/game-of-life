{"version":3,"sources":["containers/Game/Game.module.scss","services/async.ts","services/game/presets.ts","services/game/helpers.ts","services/game/game.ts","services/game/index.ts","containers/Game/Game.tsx","index.tsx"],"names":["module","exports","wrapWithPromise","action","Promise","resolve","throttle","ms","timeout","rejectRef","promise","reject","setTimeout","cancel","clearTimeout","delay","all","clearDelay","PRESET_MAP","acorn","diehard","glider","gosper_glider_gun","createGrid","size","grid","i","row","length","fill","push","getLow","n","getHigh","GameService","speed","onTick","_history","_stop","this","_updateGrid","updateHistory","tick","stepForward","then","catch","newGrid","prevGrid","left","right","j","top","bottom","c","status","stop","pop","x","y","preset","reset","forEach","play","Game","useState","setSize","hasHistory","setState","gameRef","useRef","useEffect","game","current","clean","onClick","useCallback","cell","target","iStr","dataset","jStr","parseInt","toggleCellState","cellStyles","useMemo","width","paddingBottom","className","styles","buttons","Button","color","variant","TextField","input","InputProps","startAdornment","InputAdornment","position","GridOn","inputProps","style","textAlign","onChange","e","value","type","Typography","disabled","stepBack","applyPreset","gridWrapper","map","data-alive","data-i","data-j","key","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.d88388ad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"Game_game__ZrfQL\",\"buttons\":\"Game_buttons__37Sg8\",\"input\":\"Game_input__1EQ22\",\"gridWrapper\":\"Game_gridWrapper__2e4jy\",\"grid\":\"Game_grid__3UiEY\",\"cell\":\"Game_cell__qfeak\"};","export const wrapWithPromise = (action: VoidFunction): Promise<void> =>\n  new Promise((resolve) => {\n    action()\n    resolve()\n  })\n\nexport const delay = (ms: number): { promise: Promise<void>; cancel: VoidFunction } => {\n  let timeout = 0\n  let rejectRef = () => {}\n\n  return {\n    promise: new Promise((resolve, reject) => {\n      rejectRef = () => reject('canceled')\n      timeout = setTimeout(resolve, ms)\n    }),\n    cancel: () => {\n      rejectRef()\n      clearTimeout(timeout)\n    },\n  }\n}\n\nexport const throttle = (\n  action: VoidFunction,\n  ms: number,\n): { promise: Promise<[void, void]>; clearDelay: VoidFunction } => {\n  const { cancel, promise } = delay(ms)\n\n  return {\n    promise: Promise.all([promise, wrapWithPromise(action)]),\n    clearDelay: cancel,\n  }\n}\n","export const GLIDER = [\n  [7, 7],\n  [8, 8],\n  [8, 9],\n  [9, 7],\n  [7, 8],\n]\n\nexport const GOSPER_GLIDER_GUN = [\n  [5, 1],\n  [5, 2],\n  [6, 1],\n  [6, 2],\n  [3, 35],\n  [3, 36],\n  [4, 35],\n  [4, 36],\n  [1, 25],\n  [2, 25],\n  [2, 23],\n  [3, 21],\n  [3, 22],\n  [4, 21],\n  [4, 22],\n  [5, 21],\n  [5, 22],\n  [6, 23],\n  [6, 25],\n  [7, 25],\n  [6, 18],\n  [5, 17],\n  [6, 17],\n  [7, 17],\n  [4, 16],\n  [8, 16],\n  [6, 15],\n  [3, 13],\n  [3, 14],\n  [9, 13],\n  [9, 14],\n  [4, 12],\n  [8, 12],\n  [5, 11],\n  [6, 11],\n  [7, 11],\n]\n\nexport const DIEHARD = [\n  [1, 7],\n  [2, 1],\n  [2, 2],\n  [3, 2],\n  [3, 6],\n  [3, 7],\n  [3, 8],\n]\n\nexport const ACORN = [\n  [1, 2],\n  [2, 4],\n  [3, 1],\n  [3, 2],\n  [3, 5],\n  [3, 6],\n  [3, 7],\n]\n\nexport type TPreset = 'acorn' | 'diehard' | 'glider' | 'gosper_glider_gun'\n\nexport const PRESET_MAP = {\n  acorn: ACORN,\n  diehard: DIEHARD,\n  glider: GLIDER,\n  gosper_glider_gun: GOSPER_GLIDER_GUN,\n}\n","import { TGrid } from './types'\n\nexport const createGrid = (size: number) => {\n  const grid: TGrid = []\n\n  for (let i = 0; i < size; i++) {\n    const row: boolean[] = []\n\n    row.length = size\n    row.fill(false)\n\n    grid.push(row)\n  }\n\n  return grid\n}\n\nexport const getLow = (n: number, size: number) => {\n  return n === 0 ? size - 1 : n - 1\n}\n\nexport const getHigh = (n: number, size: number) => {\n  return n === size - 1 ? 0 : n + 1\n}\n","import { throttle } from 'services/async'\nimport { PRESET_MAP, TPreset } from './presets'\nimport { createGrid, getHigh, getLow } from './helpers'\n\ntype TGrid = boolean[][]\ntype TTickHandler = (grid: TGrid, hasHistory: boolean) => void\n\nexport class GameService {\n  constructor(private size: number, private readonly speed: number, private onTick: TTickHandler) {\n    this.grid = createGrid(size)\n    this._updateGrid(this.grid, false)\n  }\n\n  clean() {\n    this._stop()\n    delete this.onTick\n  }\n\n  grid: TGrid = []\n  private _history: TGrid[] = []\n  private _stop: VoidFunction = () => {}\n\n  private _updateGrid(grid: TGrid, updateHistory = true) {\n    if (updateHistory) {\n      this._history.push(this.grid)\n    }\n\n    this.grid = grid\n    this.onTick(this.grid, this._history.length > 0)\n  }\n\n  play() {\n    const tick = () => {\n      const { promise, clearDelay } = throttle(() => this.stepForward(), this.speed)\n      this._stop = clearDelay\n\n      promise.then(tick).catch(() => {})\n    }\n\n    tick()\n  }\n\n  stop() {\n    this._stop()\n  }\n\n  stepForward() {\n    const newGrid: boolean[][] = []\n    const prevGrid = this.grid\n\n    for (let i = 0; i < this.size; i++) {\n      const row: boolean[] = []\n      const left = getLow(i, this.size)\n      const right = getHigh(i, this.size)\n\n      for (let j = 0; j < this.size; j++) {\n        const top = getLow(j, this.size)\n        const bottom = getHigh(j, this.size)\n\n        let c = 0\n        let status = prevGrid[i][j]\n\n        if (prevGrid[left][top]) c += 1\n        if (prevGrid[i][top]) c += 1\n        if (prevGrid[right][top]) c += 1\n        if (prevGrid[right][j]) c += 1\n        if (prevGrid[right][bottom]) c += 1\n        if (prevGrid[i][bottom]) c += 1\n        if (prevGrid[left][bottom]) c += 1\n        if (prevGrid[left][j]) c += 1\n\n        if (status) {\n          if (c < 2 || c > 3) {\n            status = false\n          }\n        } else if (c === 3) {\n          status = true\n        }\n\n        row.push(status)\n      }\n\n      newGrid.push(row)\n    }\n    this._updateGrid(newGrid)\n  }\n\n  stepBack() {\n    this.stop()\n\n    const prevGrid = this._history.pop()\n\n    if (prevGrid) {\n      this._updateGrid([...prevGrid], false)\n    }\n  }\n\n  reset() {\n    this.stop()\n\n    const newGrid = createGrid(this.size)\n\n    this._history = []\n    this._updateGrid(newGrid, false)\n  }\n\n  //«Живые» клетки добавляются кликом по полю, в том числе во время игры. я бы предпочел тоггл\n  toggleCellState(x: number, y: number) {\n    if (!this.grid[x][y]) {\n      this.grid[x][y] = true\n\n      this._updateGrid(this.grid)\n    }\n  }\n\n  applyPreset(preset: TPreset) {\n    this.reset()\n\n    PRESET_MAP[preset].forEach(([x, y]) => {\n      if (this.size > y && this.size > y) {\n        this.grid[x][y] = true\n      }\n    })\n\n    this._updateGrid(this.grid, false)\n\n    this.play()\n  }\n}\n","export * from './game'\nexport * from './types'\n","import React, { MouseEvent, useCallback, useMemo, useEffect, useState, useRef } from 'react'\nimport { Button, InputAdornment, TextField, Typography } from '@material-ui/core'\nimport { GridOn } from '@material-ui/icons'\n\nimport { GameService, TGrid } from 'services/game'\nimport styles from './Game.module.scss'\n\nconst TICK_TIME = 150\nconst DEFAULT_SIZE = 38\n\ntype TState = {\n  grid: TGrid\n  hasHistory: boolean\n}\n\nexport const Game = () => {\n  const [size, setSize] = useState(DEFAULT_SIZE)\n  const [{ grid, hasHistory }, setState] = useState<TState>({ grid: [], hasHistory: false })\n  const gameRef = useRef<GameService>()\n\n  useEffect(() => {\n    const game = new GameService(size, TICK_TIME, (grid, hasHistory) => setState({ grid, hasHistory }))\n\n    gameRef.current = game\n\n    return () => {\n      game.clean()\n    }\n  }, [gameRef, setState, size])\n\n  const onClick = useCallback(\n    ({ target }: MouseEvent<HTMLDivElement>) => {\n      const cell = target as HTMLDivElement\n\n      const iStr = cell.dataset['i']\n      const jStr = cell.dataset['j']\n\n      if (iStr && jStr) {\n        const i = parseInt(iStr)\n        const j = parseInt(jStr)\n\n        gameRef.current?.toggleCellState(i, j)\n      }\n    },\n    [gameRef],\n  )\n\n  const cellStyles = useMemo<React.CSSProperties>(\n    () => ({\n      width: `${100 / size}%`,\n      paddingBottom: `calc(${100 / size}% - 2px)`,\n    }),\n    [size],\n  )\n\n  return (\n    <div className={styles.game}>\n      <div className={styles.buttons}>\n        <Button color=\"primary\" onClick={() => gameRef.current?.play()} variant=\"contained\">\n          Play\n        </Button>\n        <Button onClick={() => gameRef.current?.stop()} variant=\"outlined\">\n          Stop\n        </Button>\n        <Button onClick={() => gameRef.current?.reset()} variant=\"outlined\">\n          Reset\n        </Button>\n\n        <TextField\n          className={styles.input}\n          InputProps={{\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <GridOn />\n              </InputAdornment>\n            ),\n          }}\n          inputProps={{\n            style: { textAlign: 'right' },\n          }}\n          onChange={(e) => setSize(+e.target.value)}\n          size=\"small\"\n          type=\"number\"\n          value={size}\n          variant=\"outlined\"\n        />\n      </div>\n\n      <Typography variant=\"button\">Generations</Typography>\n      <div className={styles.buttons}>\n        <Button disabled={!hasHistory} onClick={() => gameRef.current?.stepBack()} variant=\"outlined\">\n          Prev\n        </Button>\n        <Button onClick={() => gameRef.current?.stepForward()} variant=\"outlined\">\n          Next\n        </Button>\n      </div>\n\n      <Typography variant=\"button\">Presets</Typography>\n      <div className={styles.buttons}>\n        <Button onClick={() => gameRef.current?.applyPreset('glider')} variant=\"outlined\">\n          Glider\n        </Button>\n        <Button onClick={() => gameRef.current?.applyPreset('gosper_glider_gun')} variant=\"outlined\">\n          Gosper glider gun\n        </Button>\n        <Button onClick={() => gameRef.current?.applyPreset('diehard')} variant=\"outlined\">\n          Diehard\n        </Button>\n        <Button onClick={() => gameRef.current?.applyPreset('acorn')} variant=\"outlined\">\n          Acorn\n        </Button>\n      </div>\n\n      <div className={styles.gridWrapper}>\n        <div className={styles.grid} onClick={onClick}>\n          {grid.map((row, i) =>\n            row.map((cell, j) => (\n              <div\n                className={styles.cell}\n                data-alive={cell}\n                data-i={i}\n                data-j={j}\n                key={`${i}-${j}`}\n                style={cellStyles}\n              />\n            )),\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { CssBaseline } from '@material-ui/core'\n\nimport { Game } from 'containers/Game'\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}